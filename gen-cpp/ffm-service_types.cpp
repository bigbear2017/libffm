/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ffm-service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Node::~Node() throw() {
}


void Node::__set_field(const int32_t val) {
  this->field = val;
}

void Node::__set_feature(const int32_t val) {
  this->feature = val;
}

void Node::__set_value(const double val) {
  this->value = val;
}

uint32_t Node::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field);
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->feature);
          this->__isset.feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Node::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Node");

  xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->field);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("feature", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->feature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Node &a, Node &b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.feature, b.feature);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Node::Node(const Node& other0) {
  field = other0.field;
  feature = other0.feature;
  value = other0.value;
  __isset = other0.__isset;
}
Node& Node::operator=(const Node& other1) {
  field = other1.field;
  feature = other1.feature;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void Node::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Node(";
  out << "field=" << to_string(field);
  out << ", " << "feature=" << to_string(feature);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


